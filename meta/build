#!/bin/bash

# make this look better please for the love of god me - atl.

IMPORT_CONFIG="./.nisd-sources"

# Checks if the script is being run from the root repository or not.
checkdir() {
	scriptPath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
	parentDir="$(basename "$(dirname "$script_path")")"

	# the current issue is that if the user changes the nisd base folder to
	# a different name, it will assume you aren't running the script in
	# the correct place.
	#	-atl.
	# TODO: make this so that it checks based on pwd relative to the script
	if [ "$parentDir" != "nisd" ]; then	
		echo "error: the script must be ran from the 'nisd' directory."
		echo "parentDir: $parentDir"
		return 1
	fi
}

# Imports source trees from various git sources
import() {
	source "$IMPORT_CONFIG"

	git clone --depth $BOB_CLONE_DEPTH --branch $BOB_CLONE_TAG $BOB_CLONE_URL boot
	git clone --depth $INFERNO_CLONE_DEPTH --branch $INFERNO_CLONE_TAG $INFERNO_CLONE_URL kernel/
	git clone --depth $MISC_LIB_CLONE_DEPTH --branch $MISC_LIB_CLONE_TAG $MISC_LIB_CLONE_URL lib/
	git clone --depth $NLIBC_CLONE_DEPTH --branch $NLIBC_CLONE_TAG $NLIBC_CLONE_URL lib/libc/
	git clone --depth $BIN_CLONE_DEPTH --branch $BIN_CLONE_TAG $BIN_CLONE_URL bin/
	git clone --depth $GNU_CLONE_DEPTH --branch $GNU_CLONE_TAG $GNU_CLONE_URL toolchain/gnu/
	git clone --depth $BASH_CLONE_DEPTH --branch $BASH_CLONE_TAG $BASH_CLONE_URL bin/usr.bin/bash
}

buildbootloader() {
	cd boot
	mkdir -p build && cd build
	cmake -GNinja ..
	ninja
	cd ../../
}

cleanbootloader() {
	cd boot
	rm -rf build && mkdir build
	cd ../
}

buildkernel() {
	cd kernel/
	mkdir -p build && cd build
	cmake -GNinja ..
	ninja
	cd ../../
}

cleankernel() {
	cd kernel/
	rm -rf build/ && mkdir build
	cd ../
}

setupiso() {
	echo "Setting up ISO file tree."
	mkdir -p build/iso/EFI/BOOT
	echo "Copying resources..."
	cp share/res/* build/iso/.
	bootloader="boot/build/bootx64.efi"
	if [ ! -f "$bootloader" ]; then
		cleanbootloader
		buildbootloader
	fi
	echo "Copying bootloader..."
	cp $bootloader build/iso/EFI/BOOT/.
	kernel="kernel/build/kernel"
	if [ ! -f "$kernel" ]; then
		cleankernel
		buildkernel
	fi
	echo "Copying kernel..."
	cp $kernel build/iso/.
}

buildiso() {
	setupiso
	echo "Building ISO image"
	dd if=/dev/zero of=build/iso/nisd.img bs=512 count=93750
	mformat -i build/iso/nisd.img -F ::
	mmd -i build/iso/nisd.img ::/EFI
	mmd -i build/iso/nisd.img ::/EFI/BOOT
	mcopy -i build/iso/nisd.img build/iso/EFI/BOOT/bootx64.efi ::/EFI/BOOT
	mcopy -i build/iso/nisd.img build/iso/error.tga ::
	mcopy -i build/iso/nisd.img build/iso/kernel ::
	mcopy -i build/iso/nisd.img build/iso/startup.nsh ::
	mcopy -i build/iso/nisd.img build/iso/FreeSans.sfn ::
	xorriso -as mkisofs -R -f -e nisd.img -no-emul-boot -V "NISD" -o build/nisd.iso build/iso/ > /dev/null 2>&1
}

world() {
	# Builds everything outside of the kernel and bootloader
	# TODO: add nlibc and other binaries
	buildiso	
}

universe() {
	# Builds everything
	buildbootloader
	buildkernel
	world
}

case "$1" in
	import) import ;;
	bootloader) buildbootloader ;;
	cleanbootloader) cleanbootloader ;;
	kernel) buildkernel ;;
	cleankernel) cleankernel ;;
	iso) buildiso ;;
	universe) universe ;;
	*)
		echo "Usage: meta/build {target}"
		echo "Supported TARGETS:"
		echo "  import - Import sources based on .nisd-sources"
		echo "  bootloader - Build the bootloader"
		echo "  cleanbootloader - Cleans the bootloader build"
		echo "  kernel - Build the kernel"
		echo "  cleankernel - Cleans the kernel build"
		echo "  iso - Builds an iso"
		echo "  universe - Builds everything"
		exit 1
		;;
esac
